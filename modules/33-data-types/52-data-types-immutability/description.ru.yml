---

name: |
  Неизменяемость примитивных типов

theory: |

  Что произойдет, если попытаться изменить символ в строке?

  ```python
  first_name = 'Alexander'
  // Ошибка: TypeError: 'str' object does not support item assignment
  first_name[0] = 'B'
  ```

  Такое происходит из-за неизменяемости примитивных типов в Python — язык не дает никакой физической возможности поменять строку. Неизменяемость примитивных типов важна по многим причинам, ключевая — производительность. Но что делать, если нам действительно нужно её изменить? Для этого и существуют переменные:

  ```python
  first_name = 'Alexander'
  first_name = 'Blexander'
  print(first_name) # => "Blexander"
  ```

  Есть большая разница между изменением значения переменной и изменением самого значения. Примитивные типы в Python поменять нельзя (а вот составные можно, подробнее о них уже на самом Хекслете), а заменить значение переменной — без проблем.

instructions: |
  Вам даны три переменные с фамилиями разных людей. Составьте и выведите на экран слово из символов в таком порядке:

  1. Третий символ из первой строки
  2. Второй символ из второй строки
  3. Четвертый символ из третьей строки
  4. Пятый символ из второй строки
  5. Третий символ из второй строки

  Попробуйте использовать интерполяцию: внутри фигурных скобок можно помещать не только целые переменные, но и отдельные символы с помощью квадратных скобок.

tips: []

definitions: []
